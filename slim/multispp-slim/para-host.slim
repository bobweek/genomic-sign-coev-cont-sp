species all initialize(){
	initializeSLiMModelType("nonWF");
	// model parameters
	defaults = Dictionary(	
		"µₕ",  1e-8,  		// host mutation rate
		"µₚ",  1e-8,  		// parasite mutation rate
		"κₕ",  0.0001,  	// host mutation effect size
		"κₚ",  0.0001,  	// parasite mutation effect size		
		"σₕ",  5.0,  		// host dispersal distance
		"σₚ",  1.0,  		// parasite dispersal distance
		"ι",   3.0,			// spatial interspp interaction distance
		"cₕ",  0.05, 		// strength of host competition
		"cₚ",  0.03, 		// strength of para competition
		"ωₕ",  3.0,			// (spatial) host niche breadth 
		"ωₚ",  3.0,			// (spatial) parasite niche breadth
		"W₀ₕ", 1.05,		// host base fitness
		"W₀ₚ", 1.02,		// para base fitness
		"sₕ",  0.02, 		// cost on host fitness for each infection ('s' as in selection)
		"sₚ",  0.02, 		// benefit on parasite fitness for successful infection
		"γ",   1.0,			// sensitivity of inf pr to trait differences ('gamma' trad nuimser notation for this par)
		"ρ₀",  0.5			// initial population density ('rho' is trad for densities)
		);
	for (k in defaults.allKeys) {
		if (!exists(k)) {
			defineConstant(k, defaults.getValue(k));
		} else {
			defaults.setValue(k, executeLambda(paste(c(k, ";"), sep='')));
		}
	}
	defineGlobal("params", defaults);
	defineGlobal("j", 0);	
	defineConstant("Ψₕ", ι);	// host mate choice distance
	defineConstant("Ψₚ", ι);  // parasite mate choice distance	
	
	// host spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3*ωₕ);
	i1.setInteractionFunction("n", 1.0, ωₕ);
	
	// parasite spatial competition
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3*ωₚ);
	i2.setInteractionFunction("n", 1.0, ωₚ); // gaussian because it has nice edge effect properties?
	
	// host mate choice
	initializeInteractionType(3, "xy", reciprocal=T, maxDistance=Ψₕ);
	i3.setInteractionFunction("l", 1.0); // linear for speed
	
	// parasite mate choice
	initializeInteractionType(4, "xy", reciprocal=T, maxDistance=Ψₚ);
	i4.setInteractionFunction("l", 1.0);
	
	// parasitism
	initializeInteractionType(5, "xy", reciprocal=T, maxDistance=ι);
	i5.setInteractionFunction("l", 1.0);
}

species host initialize() {
	initializeSLiMOptions(dimensionality="xy");
	initializeSpecies(tickModulo=1, tickPhase=1, avatar="🦌");
	//initializeTreeSeq();
	
	// host genomics
	initializeMutationRate(µₕ);
	initializeMutationType("m1", 0.5, "n", 0.0, κₕ);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 1e8-1);
	initializeRecombinationRate(1e-8);

}

species para initialize() {
	initializeSLiMOptions(dimensionality="xy");
	initializeSpecies(tickModulo=1, tickPhase=1, avatar="🪱");
	//initializeTreeSeq();
	
	// parasite genomics
	initializeMutationRate(µₚ);
	initializeMutationType("m2", 0.5, "n", 0.0, κₚ);
	initializeGenomicElementType("g2", m2, 1.0);
	initializeGenomicElement(g2, 0, 1e8-1);
	initializeRecombinationRate(1e-8);
}

// make causal mutions neutral :B
species host fitness(m1) { return 1.0; }
species para fitness(m2) { return 1.0; }

// host mating
species host reproduction(p0) {
	mate = i3.drawByStrength(individual, 1); // find a single partner to mate with
	if(mate.size()) {
		𝓦ₕ = rpois(1, individual.tagF);
		if(𝓦ₕ>0){
			offspring = sapply(seqLen(𝓦ₕ), "subpop.addCrossed(individual, mate);");
			positions = rep(individual.spatialPosition,𝓦ₕ) + cbind(rnorm(𝓦ₕ, 0, σₕ), rnorm(𝓦ₕ, 0, σₕ));
			positions = p1.pointReflected(positions);
			offspring.setSpatialPosition(positions);
		}
	}
	return;
}

// parasite mating
species para reproduction(p1) {
	mate = i4.drawByStrength(individual, 1);
	if(mate.size()) {
		𝓦ₚ = rpois(1, individual.tagF);
		if(𝓦ₚ>0){
			offspring = sapply(seqLen(𝓦ₚ), "subpop.addCrossed(individual, mate);");
			positions = rep(individual.spatialPosition,𝓦ₚ) + cbind(rnorm(𝓦ₚ, 0, σₚ), rnorm(𝓦ₚ, 0, σₚ));
			positions = p1.pointReflected(positions);
			offspring.setSpatialPosition(positions);
		}
	}
	return;
}

ticks all 1 early() {
	N₀ = asInteger(ρ₀ * 100 * 100); // Initial Population Size (ρ₀ ind's per unit area)
	host.addSubpop("p0", N₀);
	para.addSubpop("p1", N₀);
	p0.setSpatialBounds(c(0, 0, 100, 100));
	p1.setSpatialBounds(c(0, 0, 100, 100));
	p0.individuals.setSpatialPosition(p0.pointUniform(N₀));
	p1.individuals.setSpatialPosition(p1.pointUniform(N₀));
//	host.readFromPopulationFile("~/gsccs-data/hinit.trees"); // consider if dfe looks different for msprime vs slim
//	para.readFromPopulationFile("~/gsccs-data/pinit.trees"); // and also if later dynamics change depending
}

ticks all 2:1999 first(){
	i1.evaluate(p0);
	i2.evaluate(p1);
	i3.evaluate(p0);
	i4.evaluate(p1);
	i5.evaluate(p0);
	i5.evaluate(p1);
	
	// caculating the phenotype as sum of loci with mutation
	zₕ = p0.individuals.sumOfMutationsOfType(m1);
	zₚ = p1.individuals.sumOfMutationsOfType(m2);
	
	// save trait values (for coloring later)
	p0.individuals.z = zₕ;
	p1.individuals.z = zₚ;
	
	// containers for dist's parasites move to hosts
	pd = rep(0.0,p1.individualCount);
	
	// compute fx of intraspp comp on host fecun
	Nₕ = i1.localPopulationDensity(p0.individuals); // be sure to set the intxn kernel to a gaussian
	p0.individuals.tagF = W₀ₕ*exp(-cₕ*Nₕ);

	// compute fx of intraspp comp on para fecun
	Nₚ = i2.localPopulationDensity(p1.individuals);
	p1.individuals.tagF = W₀ₚ*exp(-cₚ*Nₚ);
	
	// forces non-overlapping generations	
	p0.individuals.fitnessScaling = 0;
	p1.individuals.fitnessScaling = 0;

	// logging position, trait value, fitness, parasite movement and species id for each individual
	if(community.tick%10==0){
		fn = paste0("~/gsccs-data/ind-data/indData",format("%04i",j),".csv");
		j = j+1;
		writeFile(fn,paste("x","y","z","W","pd","spp",sep=","),append=F); // pd = distance parasite moves to host
		for(h in p0.individuals){
			writeFile(fn,paste(h.x,h.y,zₕ[h.index],h.tagF,0,1,sep=","),append=T); // pd = 0 for hosts
		}
		for(p in p1.individuals){
			writeFile(fn,paste(p.x,p.y,zₚ[p.index],p.tagF,pd[p.index],2,sep=","),append=T);
		}
	}

}

ticks all 2000: first(){
	i1.evaluate(p0);
	i2.evaluate(p1);
	i3.evaluate(p0);
	i4.evaluate(p1);
	i5.evaluate(p0);
	i5.evaluate(p1);
	
	// caculating the phenotype as sum of loci with mutation
	zₕ = p0.individuals.sumOfMutationsOfType(m1);
	zₚ = p1.individuals.sumOfMutationsOfType(m2);
	
	// save trait values (for coloring later)
	p0.individuals.z = zₕ;
	p1.individuals.z = zₚ;
	
	// containers for dist's parasites move to hosts
	pd = rep(0.0,p1.individualCount);
	
	// compute fx of intraspp comp on host fecun
	Nₕ = i1.localPopulationDensity(p0.individuals); // be sure to set the intxn kernel to a gaussian
	p0.individuals.tagF = W₀ₕ*exp(-cₕ*Nₕ);

	// compute fx of intraspp comp on para fecun
	Nₚ = i2.localPopulationDensity(p1.individuals);
	p1.individuals.tagF = W₀ₚ*exp(-cₚ*Nₚ);
	
			
	// compute fx of intraspp comp on para fecun
	// and incorporate fx of interspp intxns on host/para fecun
	for(p in p1.individuals){
		
		// save parasite location for later	
		pp = c(p.x,p.y);
		
		h = i5.nearestInteractingNeighbors(p,1,p0); // consider drawByStrength
		if(length(h)>0){
		
		// move parasite to that host
		p.setSpatialPosition(c(h.x,h.y));
		
		// save distance parasite moved to host
		pd[p.index] = sqrt(sum((c(p.x,p.y)-pp)^2));		
		
		// trait-matching-model
		α = exp(-γ*abs(h.z-p.z));
		
		// deterministic fitness outcome is faster and easier to analyze
		p.tagF = (exp(sₚ)*α + (1-α)) * p.tagF;
		h.tagF = (exp(-sₕ)*α + (1-α)) * h.tagF;
		}

		// note: each parasite infects at most one host, but each host can be infected by multiple parasites
		//			hence, if a host is infected by three parasites it will incur the fitness cost of sₕ^3
	}
	
	// forces non-overlapping generations	
	p0.individuals.fitnessScaling = 0;
	p1.individuals.fitnessScaling = 0;

	// logging position, trait value, fitness, parasite movement and species id for each individual
	if(community.tick%10==0){
		fn = paste0("~/gsccs-data/ind-data/indData",format("%04i",j),".csv");
		j = j+1;
		writeFile(fn,paste("x","y","z","W","pd","spp",sep=","),append=F); // pd = distance parasite moves to host
		for(h in p0.individuals){
			writeFile(fn,paste(h.x,h.y,zₕ[h.index],h.tagF,0,1,sep=","),append=T); // pd = 0 for hosts
		}
		for(p in p1.individuals){
			writeFile(fn,paste(p.x,p.y,zₚ[p.index],p.tagF,pd[p.index],2,sep=","),append=T);
		}
	}

}

//ticks all 3: late(){
//	for(subpop in c(p0,p1)){
//		val = cbind(((0.5+subpop.individuals.z)%0.02)/0.02,
//		rep(0.75,subpop.individualCount), 
//		rep(0.75,subpop.individualCount));
//		subpop.individuals.color = rgb2color(hsv2rgb(val));
//	}
//}

ticks all 6000 late() {
	//host.treeSeqOutput("~/gsccs-data/host.trees", metadata=params);
	//para.treeSeqOutput("~/gsccs-data/para.trees", metadata=params);
	community.simulationFinished();
	catn("Done.");
}