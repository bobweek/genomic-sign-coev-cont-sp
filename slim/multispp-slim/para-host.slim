species all initialize(){
	initializeSLiMModelType("nonWF");
	// model parameters
	defaults = Dictionary(
		"µₕ",  0.5,  		// host mutation effect size (greek letter 'mu' for 'mutation')
		"µₚ",  0.5,  		// parasite mutation effect size
		"σₕ",  5.0,  		// host dispersal distance	('sigma' is trad notation for disp dist)
		"σₚ",  5.0,  		// parasite dispersal distance
		"ι",   5.0,			// spatial interspp interaction distance ('iota' for 'interaction')
		"cₕ",  0.001, 		// strength of host competition
		"cₚ",  0.001, 		// strength of para competition
		"ωₕ",  7.0,			// (spatial) host niche breadth ('omega' looks like w for 'width', trad quant gen notation)
		"ωₚ",  7.0,			// (spatial) parasite niche breadth
		"W₀ₕ", 1.1,			// host base fitness ('W' trad notation for expected liftme repr output)
		"W₀ₚ", 1.1,			// para base fitness
		"sₕ",  0.0, 		// cost on host fitness for each infection ('s' as in selection)
		"sₚ",  0.01, 		// benefit on parasite fitness for successful infection
		"γ",   0.1,			// sensitivity of inf pr to trait differences ('gamma' trad nuimser notation for this par)
		"ρ₀",  0.2			// initial population density ('rho' is trad for densities)
		);
	for (k in defaults.allKeys) {
		if (!exists(k)) {
			defineConstant(k, defaults.getValue(k));
		} else {
			defaults.setValue(k, executeLambda(paste(c(k, ";"), sep='')));
		}
	}
	defineGlobal("params", defaults);
	defineConstant("Ψₕ", σₕ);	// host mate choice distance
	defineConstant("Ψₚ", σₚ);  // parasite mate choice distance	
	
	// host spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=ωₕ);
	
	// parasite spatial competition
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=ωₚ);
	
	// host mate choice
	initializeInteractionType(3, "xy", reciprocal=T, maxDistance=Ψₕ);
	
	// parasite mate choice
	initializeInteractionType(4, "xy", reciprocal=T, maxDistance=Ψₚ);
	
	// parasitism
	initializeInteractionType(5, "xy", reciprocal=F, maxDistance=ι);

}

species host initialize() {
	initializeSLiMOptions(dimensionality="xy");
	initializeSpecies(tickModulo=1, tickPhase=1, avatar="🦌");
	initializeTreeSeq();
	
	// host genomics
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "n", 0.0, µₕ);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 1e8-1);
	initializeRecombinationRate(1e-8);

}

species para initialize() {
	initializeSLiMOptions(dimensionality="xy");
	initializeSpecies(tickModulo=1, tickPhase=1, avatar="🪱");
	initializeTreeSeq();
	
	// parasite genomics
	initializeMutationRate(1e-7);
	initializeMutationType("m2", 0.5, "n", 0.0, µₚ);
	initializeGenomicElementType("g2", m2, 1.0);
	initializeGenomicElement(g2, 0, 1e8-1);
	initializeRecombinationRate(1e-8);
}

// make causal mutions neutral :B
species host fitness(m1) { return 1.0; }
species para fitness(m2) { return 1.0; }

// host mating
species host reproduction(p1) {
	mate = i3.drawByStrength(individual, 1); // find a single partner to mate with
	if(mate.size()) {
		𝓦ₕ= rpois(1, individual.tagF);
		for(i in seqLen(𝓦ₕ)) {
			subpop.addCrossed(individual, mate);
		}
	}
	return;
}
species host modifyChild() {
	// Absorbing boundary conditions
	pos = parent1.spatialPosition + rnorm(2, 0, σₕ);
	if (!p1.pointInBounds(pos))
		return F;
	child.setSpatialPosition(pos);
	return T;
}


// parasite mating
species para reproduction(p2) {
	mate = i4.drawByStrength(individual, 1);
	if(mate.size()) {
		𝓦ₚ = rpois(1, individual.tagF);
		for(i in seqLen(𝓦ₚ)) {
			subpop.addCrossed(individual, mate);
		}
	}
	return;
}
species para modifyChild() {
	// Absorbing boundary conditions
	pos = parent1.spatialPosition + rnorm(2, 0, σₚ);
	if (!p1.pointInBounds(pos))
		return F;
	child.setSpatialPosition(pos);
	return T;
}

ticks all 1 early() {
	N₀ = asInteger(ρ₀ * 100 * 100); // Initial Population Size (ρ₀ ind's per unit area)
	host.addSubpop("p1", N₀);
	para.addSubpop("p2", N₀);
	p1.setSpatialBounds(c(0, 0, 100, 100));
	p2.setSpatialBounds(c(0, 0, 100, 100));
	p1.individuals.setSpatialPosition(p1.pointUniform(N₀));
	p2.individuals.setSpatialPosition(p2.pointUniform(N₀));
}

ticks all late(){
	i1.evaluate(p1);
	i2.evaluate(p2);
	i3.evaluate(p1);
	i4.evaluate(p2);
	i5.evaluate(p1);
	
	// caculating the phenotype as sum of loci with mutation
	zₕ = p1.individuals.sumOfMutationsOfType(m1);
	zₚ = p2.individuals.sumOfMutationsOfType(m2);
	
	// save trait values
	p1.individuals.z = zₕ;
	p2.individuals.z = zₚ;
	
	// identify phenotypes by hue
	for(ind in p1.individuals){
		val = (ind.z%100)/100;
		ind.color = rgb2color(hsv2rgb(c(val, 0.75, 0.75)));
	}
	for(ind in p2.individuals){
		val = (ind.z%100)/100;
		ind.color = rgb2color(hsv2rgb(c(val, 0.75, 0.75)));
	}
	
	// compute fx of intraspp comp on host fecun
	for(h in p1.individuals){
		Nₕ = i1.interactingNeighborCount(h);
		h.tagF = W₀ₕ*exp(-cₕ*Nₕ);
	}
	
	// compute fx of intraspp comp on para fecun
	// and incorporate fx of interspp intxns on host/para fecun
	for(p in p2.individuals){
		Nₚ = i2.interactingNeighborCount(p);
		Wₚ = W₀ₚ*exp(-cₚ*Nₚ);
		
		// if there's any hosts out there
		if( p1.individualCount > 0 ){
			// draw hosts within radius ι of focal parasite
			h_nbrs = i5.nearestNeighborsOfPoint(c(p.x,p.y), p1, count=p1.individualCount);
			// not using p.spatialPosition because im scared it'll create dependency on z
		} else h_nbrs = c();
		
		// if there's hosts nearby
		if(length(h_nbrs) > 0){
			
			// choose one living host at random for parasite to interact with
			h = h_nbrs[rdunif(1, 0, length(h_nbrs)-1)];
			
			// move parasite to that host
			p.setSpatialPosition(c(h.x,h.y));
			// not using h.spatialPosition because im scared it'll copy z
			
			// trait-matching-model
			α = exp(-γ*(zₕ[h.index]-zₚ[p.index])^2/2);
			
			// deterministic fitness outcome is faster and easier to analyze
			Wₚ = (exp(sₚ)*α + (1-α)) * Wₚ;
			h.tagF = (exp(sₕ)*α + (1-α)) * h.tagF;
		
		}
		// note: each parasite infects at most one host, but each host can be infected by multiple parasites
		//			hence, if a host is infected by three parasites it will incur the fitness cost of sₕ^3
		p.tagF = Wₚ;
	}
	
	// forces non-overlapping generations	
	p2.individuals.fitnessScaling = 0;
	p1.individuals.fitnessScaling = 0;
	
	// logging position, trait value, fitness and species id for each individual
	if(community.tick%10==1){
		fn = paste0("~/indData",format("%04i",community.tick),".csv");
		writeFile(fn,paste("x","y","z","W","spp",sep=","),append=F);
		for(h in p1.individuals){
			writeFile(fn,paste(h.x,h.y,zₕ[h.index],h.tagF,1,sep=","),append=T);
		}
		for(p in p2.individuals){
			writeFile(fn,paste(p.x,p.y,zₚ[p.index],p.tagF,2,sep=","),append=T);
		}
	}

}

ticks all 5000 late() {
	host.treeSeqOutput("host.trees", metadata=params);
	para.treeSeqOutput("para.trees", metadata=params);
	community.simulationFinished();
	catn("Done.");
}