using SpecialFunctions     # provides Bessel and Gamma functions
using DSP                  # for numerical convolution
using Cuba
using Plots
using Parameters
gr()

#
# to visualize host-parasite cross-covariance, we need to numerically convolve Bessel functions
#
# in particular, we want C‚Çï‚Çö(x) = [K‚ÇÄ(‚ãÖ)‚àóM(‚ãÖ|ŒΩ,Œ∫)](x)
#

# data type that holds model parameters
@with_kw mutable struct CoevPars

    # primary parameters
    G‚Çï::Float64 # additive genetic variance of host
	G‚Çö::Float64 # additive genetic variance of parasite
	œÅ‚Çï::Float64 # effective population size of host
    œÅ‚Çö::Float64 # effective population size of parasite
	A‚Çï::Float64	# strength of abiotic selection on host
	A‚Çö::Float64	# strength of abiotic selection on parasite
	B‚Çï::Float64	# strength of biotic selection on host
	B‚Çö::Float64	# strength of biotic selection on parasite
	œÉ‚Çï::Float64	# host disperal distance
	œÉ‚Çö::Float64	# parasite disperal distance

    # other parameters
    v‚Çï::Float64  # expressed variance of host
	v‚Çö::Float64  # expressed variance of parasite
	r‚Çï::Float64  # intrinsic growth rate of host
    r‚Çö::Float64  # intrinsic growth rate of parasite
    ùìù‚Çï::Float64 # Wright's neighborhood size of host
    ùìù‚Çö::Float64 # Wright's neighborhood size of parasite
	
end

# power spectra
S‚Çï = function(k,p)

    if length(k) != 2
        print("k needs to be a 2d vector")
        return
    end

    # k = [k‚ÇÅ, k‚ÇÇ] = wavenumber
    # p = model parameters

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    knorm = sqrt(k[1]^2+k[2]^2)
    num = B‚Çï^2*G‚Çï^2*G‚Çö/œÅ‚Çö + G‚Çï*( G‚Çö*(A‚Çö+B‚Çö)+0.5*œÉ‚Çö^2*knorm^2 )^2/œÅ‚Çï
    den = (2*œÄ)*( B‚Çï*B‚Çö*G‚Çï*G‚Çö + (G‚Çï*(A‚Çï-B‚Çï)+0.5*(œÉ‚Çï*knorm)^2) * (G‚Çö*(A‚Çö+B‚Çö)+0.5*(œÉ‚Çö*knorm)^2) )^2

    return(num/den)

end

S‚Çö = function(k,p)

    if length(k) != 2
        print("k needs to be a 2d vector")
        return
    end

    # k = [k‚ÇÅ, k‚ÇÇ] = wavenumber
    # p = model parameters

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    knorm = sqrt(k[1]^2+k[2]^2)
    num = B‚Çö^2*G‚Çö^2*G‚Çï/œÅ‚Çï + G‚Çö*( G‚Çï*(A‚Çï-B‚Çï)+0.5*œÉ‚Çï^2*knorm^2 )^2/œÅ‚Çö
    den = (2*œÄ)*( B‚Çï*B‚Çö*G‚Çï*G‚Çö + (G‚Çï*(A‚Çï-B‚Çï)+0.5*(œÉ‚Çï*knorm)^2) * (G‚Çö*(A‚Çö+B‚Çö)+0.5*(œÉ‚Çö*knorm)^2) )^2

    return(num/den)

end

S‚Çï‚Çö = function(k,p)

    if length(k) != 2
        print("k needs to be a 2d vector")
        return
    end

    # k = [k‚ÇÅ, k‚ÇÇ] = wavenumber
    # p = model parameters

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    knorm = sqrt(k[1]^2+k[2]^2)
    num = B‚Çö*G‚Çö*G‚Çï*( G‚Çö*(A‚Çö+B‚Çö)+0.5*(œÉ‚Çö*knorm)^2 )/œÅ‚Çï - B‚Çï*G‚Çï*G‚Çö*( G‚Çï*(A‚Çï-B‚Çï)+0.5*(œÉ‚Çï*knorm)^2 )/œÅ‚Çö
    den = ( B‚Çï*B‚Çö*G‚Çï*G‚Çö + (G‚Çï*(A‚Çï-B‚Çï)+0.5*(œÉ‚Çï*knorm)^2) * (G‚Çö*(A‚Çö+B‚Çö)+0.5*(œÉ‚Çö*knorm)^2) )^2

    return(num/den)

end

SÃÉ‚Çï‚Çö = function(k,p)

    if length(k) != 2
        print("k needs to be a 2d vector")
        return
    end

    # k = [k‚ÇÅ, k‚ÇÇ] = wavenumber
    # p = model parameters

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p
    
    # compute characteristic lengths of intraspecific spatial variation
    Œæ‚Çï = œÉ‚Çï / ‚àö(G‚Çï * (A‚Çï - B‚Çï))
    Œæ‚Çö = œÉ‚Çö / ‚àö(G‚Çö * (A‚Çö + B‚Çö))

    # variance in mean trait values
    V‚Çï = 1 / (œÅ‚Çï * œÉ‚Çï^2 * (A‚Çï - B‚Çï))
    V‚Çö = 1 / (œÅ‚Çö * œÉ‚Çö^2 * (A‚Çö + B‚Çö))
    
    knorm = sqrt(k[1]^2+k[2]^2)

    num‚Çö = B‚Çö*V‚Çï*Œæ‚Çï^2
    deœÅ‚Çö = (A‚Çö+B‚Çö)*(1+0.5*(Œæ‚Çï*knorm)^2)^2*(1+0.5*(Œæ‚Çö*knorm)^2)

    num‚Çï = B‚Çï*V‚Çö*Œæ‚Çö^2
    deœÅ‚Çï = (A‚Çï-B‚Çï)*(1+0.5*(Œæ‚Çö*knorm)^2)^2*(1+0.5*(Œæ‚Çï*knorm)^2)

    return((num‚Çö/deœÅ‚Çö) - (num‚Çï/deœÅ‚Çï))

end

CubaS‚Çï‚Çö = function(y,p)

    if length(y) != 2
        print("y needs to be a 2d vector")
        return
    end

    k‚ÇÅ  = (2*y[1]-1) / (y[1]*(1-y[1]))
    dk‚ÇÅ = (2*y[1]^2-2*y[1]+1) / (y[1]^2*(1-y[1])^2)

    k‚ÇÇ  = (2*y[2]-1) / (y[2]*(1-y[2]))
    dk‚ÇÇ = (2*y[2]^2-2*y[2]+1) / (y[2]^2*(1-y[2])^2)
    
    # k = [k‚ÇÅ, k‚ÇÇ] = wavenumber
    # p = model parameters

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    knorm = sqrt(k‚ÇÅ^2+k‚ÇÇ^2)
    num‚ÇÅ = B‚Çö*G‚Çö*G‚Çï*( G‚Çö*(A‚Çö+B‚Çö)+0.5*(œÉ‚Çö*knorm)^2 )/œÅ‚Çï
    num‚ÇÇ = B‚Çï*G‚Çï*G‚Çö*( G‚Çï*(A‚Çï-B‚Çï)+0.5*(œÉ‚Çï*knorm)^2 )/œÅ‚Çö
    num = num‚ÇÅ - num‚ÇÇ
    den = ( B‚Çï*B‚Çö*G‚Çï*G‚Çö + (G‚Çï*(A‚Çï-B‚Çï)+0.5*(œÉ‚Çï*knorm)^2) * (G‚Çö*(A‚Çö+B‚Çö)+0.5*(œÉ‚Çö*knorm)^2) )^2

    return(dk‚ÇÅ*dk‚ÇÇ*num/den)

end

CubaDÃÇ = function(y,p)
    
    if length(y) != 2
        print("y needs to be a 2d vector")
        return
    end

    k‚ÇÅ  = (2*y[1]-1) / (y[1]*(1-y[1]))
    dk‚ÇÅ = (2*y[1]^2-2*y[1]+1) / (y[1]^2*(1-y[1])^2)

    k‚ÇÇ  = (2*y[2]-1) / (y[2]*(1-y[2]))
    dk‚ÇÇ = (2*y[2]^2-2*y[2]+1) / (y[2]^2*(1-y[2])^2)
    
    DÃÇ = exp(-0.5*(k‚ÇÅ^2+k‚ÇÇ^2)*(p.œÉ‚Çï^2+p.œÉ‚Çö^2))/(2*œÄ)

    return(DÃÇ*dk‚ÇÅ*dk‚ÇÇ)

end

# calculating expected covariance via numerical integration wrt distance distribution in fourier space
CÃÑ‚Çï‚Çö = function (p)

    cout = cuhre((k,f) -> f[1] = CubaDÃÇ(k,p)*CubaS‚Çï‚Çö(k,p)/(2*œÄ), 2)

    if cout[5]!=0
        print("error\n")
        return(0)
    end

    CÃÑ = cout[1][1]

    return(CÃÑ)
    
end

# covariance functions
C‚Çï‚Çï = function (x,p)

    # x = distance
    # p = model parameters

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    # compute characteristic lengths of intraspecific spatial variation
    Œæ‚Çï = œÉ‚Çï / ‚àö(G‚Çï * (A‚Çï - B‚Çï))

    # variance in mean trait values
    V‚Çï = 1 / (œÅ‚Çï * œÉ‚Çï^2 * (A‚Çï - B‚Çï))

    return(V‚Çï * ‚àö2 * x * besselk(1,‚àö2 * x / Œæ‚Çï) / Œæ‚Çï)
end

C‚Çö‚Çö = function (x,p)

    # x = distance
    # p = model parameters

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    # compute characteristic lengths of intraspecific spatial variation
    Œæ‚Çö = œÉ‚Çö / ‚àö(G‚Çö * (A‚Çö + B‚Çö))

    # variance in mean trait values
    V‚Çö = 1 / (œÅ‚Çö * œÉ‚Çö^2 * (A‚Çö + B‚Çö))

    return(V‚Çö * ‚àö2 * x * besselk(1,‚àö2 * x / Œæ‚Çö) / Œæ‚Çö)
end

# the marginal covariance
C‚Çï‚Çö‚ÇÄ = function (p)

    # p = model parameters

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    # compute characteristic lengths of intraspecific spatial variation
    Œæ‚Çï = œÉ‚Çï / ‚àö(G‚Çï * (A‚Çï - B‚Çï))
    Œæ‚Çö = œÉ‚Çö / ‚àö(G‚Çö * (A‚Çö + B‚Çö))

    num‚Çö = B‚Çö*G‚Çï*G‚Çö*(Œæ‚Çï^6*Œæ‚Çö^2-Œæ‚Çï^4*Œæ‚Çö^4-log(Œæ‚Çï^2)*Œæ‚Çï^4*Œæ‚Çö^4+log(Œæ‚Çö^2)*Œæ‚Çï^4*Œæ‚Çö^4)
    deœÅ‚Çö = œÅ‚Çï*(Œæ‚Çï^2-Œæ‚Çö^2)^2*œÉ‚Çï^4*œÉ‚Çö^2

    num‚Çï = B‚Çï*G‚Çï*G‚Çö*(Œæ‚Çï^4*Œæ‚Çö^4-log(Œæ‚Çï^2)*Œæ‚Çï^4*Œæ‚Çö^4+log(Œæ‚Çö^2)*Œæ‚Çï^4*Œæ‚Çö^4-Œæ‚Çï^2*Œæ‚Çö^6)
    deœÅ‚Çï = œÅ‚Çï*(Œæ‚Çï^2-Œæ‚Çö^2)^2*œÉ‚Çï^4*œÉ‚Çö^2

    # CHP0 = 8*G‚Çï*G‚Çö*(Œæ‚Çï*Œæ‚Çö)^2 * ( B‚Çö*(Œæ‚Çï^4+(Œæ‚Çï*Œæ‚Çö)^2*(2*log(Œæ‚Çö/Œæ‚Çï)-1))/(œÅ‚Çï*œÉ‚Çï^2) - B‚Çï*(Œæ‚Çö^4+(Œæ‚Çï*Œæ‚Çö)^2*(2*log(Œæ‚Çï/Œæ‚Çö)-1))/(œÅ‚Çö*œÉ‚Çö^2) ) / ( œÉ‚Çï^2*œÉ‚Çö^2*(Œæ‚Çï^2-Œæ‚Çö^2)^2 )

    return((num‚Çö/deœÅ‚Çö)+(num‚Çï/deœÅ‚Çï))

end


# now for the convolution...
C‚Çï‚Çö = function (l‚ÇÅ, u‚ÇÅ, s‚ÇÅ, l‚ÇÇ, u‚ÇÇ, s‚ÇÇ, p)

    # l·µ¢ is lower bound for i-th coordinate
    # u·µ¢ is upper bound for i-th coordinate
    # s·µ¢ is step size for i-th coordinate
    # p = model parameters

    # define range to convolve over
    x‚ÇÅ = l‚ÇÅ:s‚ÇÅ:u‚ÇÅ
    x‚ÇÇ = l‚ÇÇ:s‚ÇÇ:u‚ÇÇ
    x‚ÇÅ = filter(x -> x ‚â† 0, x‚ÇÅ) # avoids singularities
    x‚ÇÇ = filter(x -> x ‚â† 0, x‚ÇÇ)

    # unpack model parameters
    @unpack G‚Çï,G‚Çö,œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    # compute characteristic lengths of intraspecific spatial variation
    Œæ‚Çï = œÉ‚Çï / ‚àö(G‚Çï * (A‚Çï - B‚Çï))
    Œæ‚Çö = œÉ‚Çö / ‚àö(G‚Çö * (A‚Çö + B‚Çö))

    # variance in mean trait values
    V‚Çö = 1 / (œÅ‚Çö * œÉ‚Çö^2 * (A‚Çö + B‚Çö))
    V‚Çï = 1 / (œÅ‚Çï * œÉ‚Çï^2 * (A‚Çï - B‚Çï))

    # holds values of Bessel K‚ÇÄ function with host parameters
    K‚ÇÄ‚Çï = zeros(length(x‚ÇÅ), length(x‚ÇÇ))
    for x in x‚ÇÅ
        for y in x‚ÇÇ
            u = ‚àö(x^2 + y^2)
            K‚ÇÄ‚Çï[findfirst(z -> z == x, x‚ÇÅ),findfirst(z -> z == y, x‚ÇÇ)] = 2 .* besselk(0, ‚àö2*u/Œæ‚Çï) / Œæ‚Çï^2
        end
    end

    # holds values of Bessel K‚ÇÄ function with parasite parameters
    K‚ÇÄ‚Çö = zeros(length(x‚ÇÅ), length(x‚ÇÇ))
    for x in x‚ÇÅ
        for y in x‚ÇÇ
            u = ‚àö(x^2 + y^2)
            K‚ÇÄ‚Çö[findfirst(z -> z == x, x‚ÇÅ),findfirst(z -> z == y, x‚ÇÇ)] = 2 .* besselk(0, ‚àö2*u/Œæ‚Çö) / Œæ‚Çö^2
        end
    end

    M‚ÇÅ‚Çï = zeros(length(x‚ÇÅ), length(x‚ÇÇ))
    for x in x‚ÇÅ
        for y in x‚ÇÇ
            u = ‚àö(x^2 + y^2)
            M‚ÇÅ‚Çï[findfirst(z -> z == x, x‚ÇÅ),findfirst(z -> z == y, x‚ÇÇ)] = V‚Çï * ‚àö2 * u * besselk(1, ‚àö2*u/Œæ‚Çï) / Œæ‚Çï
        end
    end

    M‚ÇÅ‚Çö = zeros(length(x‚ÇÅ), length(x‚ÇÇ))
    for x in x‚ÇÅ
        for y in x‚ÇÇ
            u = ‚àö(x^2 + y^2)
            M‚ÇÅ‚Çö[findfirst(z -> z == x, x‚ÇÅ),findfirst(z -> z == y, x‚ÇÇ)] = V‚Çö * ‚àö2 * u * besselk(1, ‚àö2*u/Œæ‚Çö) / Œæ‚Çö
        end
    end

    K‚ÇÄ‚ÇöM‚ÇÅ‚Çï = conv(K‚ÇÄ‚Çö, M‚ÇÅ‚Çï)
    K‚ÇÄ‚ÇïM‚ÇÅ‚Çö = conv(K‚ÇÄ‚Çï, M‚ÇÅ‚Çö)


    CHP0 = C‚Çï‚Çö‚ÇÄ(p)

    C‚Çï‚Çö = ( B‚Çö.*(K‚ÇÄ‚ÇöM‚ÇÅ‚Çï)./(A‚Çö+B‚Çö) ) .- ( B‚Çï.*(K‚ÇÄ‚ÇïM‚ÇÅ‚Çö)./(A‚Çï-B‚Çï) )

    C‚Çï‚Çö *= CHP0/maximum(C‚Çï‚Çö)

    return(C‚Çï‚Çö)

end

# the marginal covariance computed numerically
C‚Çï‚Çö‚ÇÄNUM = function (m,s,p)

    # m = max distance
    # s = step size (ie., resolution)
    # p = model parameters

    # unpack some parameters
    @unpack œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö,r‚Çï,r‚Çö,v‚Çï,v‚Çö = p
    
    # these are same as C‚Çï‚Çï(0,p) and C‚Çö‚Çö(0,p) resp.
    # local_var‚Çï = 1 / (œÅ‚Çï * œÉ‚Çï * (A‚Çï - B‚Çï))
    # local_var‚Çö = 1 / (œÅ‚Çö * œÉ‚Çö * (A‚Çö + B‚Çö))

    # compute cross-covariance function
    CHP = C‚Çï‚Çö(-m,m,s,-m,m,s,p)

    # define range
    U = 0:s:(2*m)

    L = length(U)-1
    CHP0 = CHP[L,L]
    
    return(CHP0)

end

# the covariance at expected distance
C‚Çï‚ÇödÃÑ = function (m,s,p)

    # m = max distance
    # s = step size (ie., resolution)
    # p = model parameters

    # unpack some parameters
    @unpack œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö,r‚Çï,r‚Çö,v‚Çï,v‚Çö = p
    
    # expected distance
    dÃÑ = ‚àö(œÄ*(œÉ‚Çï^2+œÉ‚Çö^2)/2)

    # compute cross-covariance function
    CHP = C‚Çï‚Çö(-m,m,s,-m,m,s,p)

    # define range
    U = 0:s:(2*m)

    ind_dÃÑ = findfirst( z -> z >= dÃÑ, U)

    L = length(U) - 1
    LdÃÑ = ind_dÃÑ + length(U) - 1
    CHPdÃÑ = CHP[LdÃÑ,L]
    
    return(CHPdÃÑ)

end

# plots spatial correlations and cross-correlation
plotSpCorr = function (m,s,p)

    # m = max distance
    # s = step size (ie., resolution)
    # p = model parameters

    # compute cross-covariance function
    CHP = C‚Çï‚Çö(-m,m,s,-m,m,s,p)

    # define range
    U = 0:s:(2*m)

    CHH = zeros(length(U))
    CPP = zeros(length(U))
    count = 1
    for u in U
        CHH[count] = C‚Çï‚Çï(u,p)
        CPP[count] = C‚Çö‚Çö(u,p)
        count += 1
    end

    # unpack some parameters
    @unpack œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö = p

    # calculate local variances to normalize correlations
    V‚Çï = 1 / (œÅ‚Çï * œÉ‚Çï^2 * (A‚Çï - B‚Çï))
    V‚Çö = 1 / (œÅ‚Çö * œÉ‚Çö^2 * (A‚Çö + B‚Çö))

    ttle = string("Dispersal Ratio: œÉ‚Çï/œÉ‚Çö = ", œÉ‚Çï/œÉ‚Çö)

    # make array with correlations on columns
    L = length(U)-1
    œÅs = hcat( CHH, CPP, CHP[(L-1):(2 * L - 1),L]/sqrt(V‚Çï*V‚Çö) )
    plot(U, œÅs,label=["œÅ‚Çï" "œÅ‚Çö" "œÅ‚Çï‚Çö"],title=ttle, legendfontsize=10)
    ylabel!("Trait Correlation")
    xlabel!("Spatial Lag")

end

# plots measures of local adaptation
plotLocAdapt = function (m,s,p,type)

    # m = max distance
    # s = step size (ie., resolution)
    # p = model parameters

    # unpack some parameters
    @unpack œÅ‚Çï,œÅ‚Çö,A‚Çï,A‚Çö,B‚Çï,B‚Çö,œÉ‚Çï,œÉ‚Çö,r‚Çï,r‚Çö,v‚Çï,v‚Çö = p

    # compute cross-covariance function
    CHP = C‚Çï‚Çö(-m,m,s,-m,m,s,p)

    # define range
    U = 0:s:(2*m-s)

    # expected distance
    # integrate this into the plot
    dÃÑ = ‚àö(œÄ*(œÉ‚Çï^2+œÉ‚Çö^2)/2)

    L = length(U)
    CHP0 = CHP[L,L]
    CHPX = CHP[L:(2*L-1),L]

    ‚Ñì‚Çï = B‚Çï .* (CHPX .- CHP0)
    ‚Ñì‚Çö = B‚Çö .* (CHP0 .- CHPX)

    if type == "œÉ"
        ttle = string("Dispersal Ratio: œÉ‚Çï/œÉ‚Çö = ",œÉ‚Çï/œÉ‚Çö)
    elseif type == "B"
        ttle = string("Coevolution Ratio: B‚Çï/B‚Çö = ",B‚Çï/B‚Çö)
    end

    # make array with LA measures on columns    
    las = hcat(‚Ñì‚Çï, ‚Ñì‚Çö)
    plot(U, las,label=["H" "P"],title=ttle, legendfontsize=10)
    ylabel!("Fitness Difference")
    xlabel!("Spatial Lag")

end


# returns a measure of local adaptation that accounts for limited dispersal
# slow and only approximate, replacing with below
# ‚Ñì‚Çó·µ¢‚Çò = function (m,s,p)

#     # m = max distance
#     # s = step size (ie., resolution)
#     # p = model parameters

#     # unpack some parameters
#     @unpack B‚Çï,B‚Çö = p

#     # compute cross-covariance function
#     CHPdÃÑ = C‚Çï‚ÇödÃÑ(m,s,p)
#     CHP0 = C‚Çï‚Çö‚ÇÄ(p)

#     ‚Ñì‚Çï = B‚Çï * (CHPdÃÑ - CHP0)
#     ‚Ñì‚Çö = B‚Çö * (CHP0 - CHPdÃÑ)
    
#     ‚Ñì = [‚Ñì‚Çï, ‚Ñì‚Çö]

#     return(‚Ñì)

# end


# returns a measure of local adaptation that accounts for limited dispersal
‚Ñì‚Çó·µ¢‚Çò = function (p)

    # m = max distance
    # s = step size (ie., resolution)
    # p = model parameters

    # unpack some parameters
    @unpack B‚Çï,B‚Çö = p

    # compute cross-covariance function
    CÃÑHP = CÃÑ‚Çï‚Çö(p)
    CHP0 = C‚Çï‚Çö‚ÇÄ(p)

    ‚Ñì‚Çï = B‚Çï * (CÃÑHP - CHP0)
    ‚Ñì‚Çö = B‚Çö * (CHP0 - CÃÑHP)
    
    ‚Ñì = [‚Ñì‚Çï, ‚Ñì‚Çö]

    return(‚Ñì)

end

# returns a measure of local adaptation pretending dispersal follows an island model when it's actually limited
‚Ñì‚Çñ‚Çó‚Çõ = function (p)

    # p = model parameters

    # unpack strengths of coevolutionary selection
    @unpack B‚Çï,B‚Çö = p
    
    ‚Ñì‚Çï = -B‚Çï .* C‚Çï‚Çö‚ÇÄ(p)
    ‚Ñì‚Çö =  B‚Çö .* C‚Çï‚Çö‚ÇÄ(p)

    ‚Ñì = [‚Ñì‚Çï, ‚Ñì‚Çö]

    return(‚Ñì)

end

# returns spatial covariance of trait means in the case of an island model
C‚Çï‚ÇöISL = function (p)

    # p = model parameters

    # unpack strengths of coevolutionary selection
    @unpack B‚Çï,B‚Çö,A‚Çï,A‚Çö,G‚Çö,G‚Çï,œÅ‚Çö,œÅ‚Çï,œÉ‚Çö,œÉ‚Çï = p
    
    # use discretization of laplacian to justify analogous dispersal par œÉ^2

    num = G‚Çï*G‚Çö*( B‚Çö*œÅ‚Çö*(œÉ‚Çö+G‚Çö*(A‚Çö+B‚Çö)) - B‚Çï*œÅ‚Çï*(œÉ‚Çï+G‚Çï*(A‚Çï-B‚Çï)) )

    den‚ÇÅ = 2*œÅ‚Çï*œÅ‚Çö*(œÉ‚Çï+œÉ‚Çö+G‚Çï*(A‚Çï-B‚Çï)+G‚Çö*(A‚Çö+B‚Çö))

    den‚ÇÇ = œÉ‚Çï*œÉ‚Çö + œÉ‚Çï*G‚Çö*(A‚Çö+B‚Çö) + œÉ‚Çö*G‚Çö*(A‚Çï-B‚Çï) + G‚Çï*G‚Çö*(A‚Çï*A‚Çö+A‚Çï*B‚Çö-A‚Çö*B‚Çï)

    C‚Çï‚Çö = num/(den‚ÇÅ*den‚ÇÇ)

    return(C‚Çï‚Çö)

end

# returns a measure of local adaptation in the absence of gene-flow
‚Ñì·µ¢‚Çõ‚Çó = function (p)

    # p = model parameters

    # unpack strengths of coevolutionary selection
    @unpack B‚Çï,B‚Çö = p
    
    ‚Ñì‚Çï = -B‚Çï * C‚Çï‚ÇöISL(p)
    ‚Ñì‚Çö =  B‚Çö * C‚Çï‚ÇöISL(p)

    ‚Ñì = [‚Ñì‚Çï, ‚Ñì‚Çö]

    return(‚Ñì)

end

# returns spatial covariance of trait means in the absence of gene-flow
C‚Çï‚ÇöNGF = function (p)

    # p = model parameters

    # unpack strengths of coevolutionary selection
    @unpack B‚Çï,B‚Çö,A‚Çï,A‚Çö,G‚Çö,G‚Çï,œÅ‚Çö,œÅ‚Çï = p
    
    C‚Çï‚Çö = (B‚Çö*(A‚Çö+B‚Çö)*G‚Çö*œÅ‚Çö-B‚Çï*(A‚Çï-B‚Çï)*G‚Çï*œÅ‚Çï) / 
        ( 2*œÅ‚Çï*œÅ‚Çö*(A‚Çï*A‚Çö+A‚Çï*B‚Çö-A‚Çö*B‚Çï)*(G‚Çï*(A‚Çï-B‚Çï)+G‚Çö*(A‚Çö+B‚Çö)) )

    return(C‚Çï‚Çö)

end

# returns a measure of local adaptation in the absence of gene-flow
‚Ñì‚Çò‚Çå‚ÇÄ = function (p)

    # p = model parameters

    # unpack strengths of coevolutionary selection
    @unpack B‚Çï,B‚Çö = p
    
    ‚Ñì‚Çï = -B‚Çï .* C‚Çï‚ÇöNGF(p)
    ‚Ñì‚Çö =  B‚Çö .* C‚Çï‚ÇöNGF(p)

    ‚Ñì = [‚Ñì‚Çï, ‚Ñì‚Çö]

    return(‚Ñì)

end

# index of coevolutionary advantage
ùì™ = function(p)

    @unpack A‚Çï, A‚Çö, B‚Çï, B‚Çö, G‚Çï, G‚Çö, œÅ‚Çï, œÅ‚Çö, œÉ‚Çï, œÉ‚Çö = p

    V‚Çï = 1/(œÅ‚Çï*œÉ‚Çï^2*(A‚Çï-B‚Çï))
    V‚Çö = 1/(œÅ‚Çö*œÉ‚Çö^2*(A‚Çö+B‚Çö))

    V‚Çï‚Å∞ = 1/(œÅ‚Çï*œÉ‚Çï^2*A‚Çï)
    V‚Çö‚Å∞ = 1/(œÅ‚Çö*œÉ‚Çö^2*A‚Çö)

end